
const a = 5, b = 2, c = 'hello';

// equal to operator (==)

console.log(a == 5);     // true

console.log(b == '2');   // true

console.log(c == 'Hello');  // false

//In JavaScript, == is a comparison operator, whereas = is an assignment operator. If you mistakenly use = instead of ==, you might get an unwanted result.

// not equal to operator (!=)

const k = 8, j= 5, h= 'hello';

console.log(k!=5); //true

console.log(k!=8); // false

console.log(h!= 'Hello'); // true 

//Strict Equal to Operator(===)

const m = 2;

// strict equal operator

console.log(m === 2); // true

console.log(m === '2'); // false

console.log(m == '2')  // true

//Note: The difference between == and === is that: == evaluates to true if the operands are equal, however, === evaluates to true only if the operands are equal and of the same type

//Strict Not Equal to Operator (!==) 

console.log(m != '2') // false

console.log(m !== 2) // false

console.log(m !=='2') // true 

//!== evaluates to true if the operands are strictly not equal. It's the complete opposite of strictly equal ===.In the above example, 2 != '2' gives true. It's because their types are different even though they have the same value.

//Greater than Operator(>)

const p = 8;

console.log(p> 4) //true 

console.log(p> 9) // false

//Greater than or Equal to Operator (=>)

console.log(p >= 8); // true 

console.log(p >= 11); //false 

//>= evaluates to true if the left operand is greater than or equal to the right operand.

console.log(m > 1) // true 

console.log(p > 11) // false

console.log(p > m) //true 

console.log(m > p) // false 

//Less than Operator (<)

console.log(m < 1) // false

console.log(m < 11) // true 

//< evaluates to true if the left operand is less than the right operand.

//Less than or Equal to Operator(<=)

console.log(m <= 2) // true 

console.log(p <= 8) // true 

console.log(m <= 1) // false 

//<= evaluates to true if the left operand is less than or equal to the right operand.

// NOTE : 

//Logical AND: true if both the operands/boolean values are true, else evaluates to false :- true && false; // false

//Logical OR: true if either of the operands/boolean values is true . evaluates to false if both are false :- true || false; // true

//Logical NOT: true if the operand is false and vice versa. :- !true; // false

//Logical AND Operator

const f = true ;

const s = true ;

const o = false;

console.log(f && s) // true

console.log(f && o) // false

console.log((p > 7) && (p > 5)) // true 

// && evaluates to true if both the operands are true, else evaluates to false.

// Note: You can also use logical operators with numbers. In JavaScript, 0 is false and all non-zero values are true.

//Logical OR Operator

console.log(f || s) // true

console.log(f || o) // true 

// || evaluates to true if either of the operands is true. If both operands are false, the result is false.

//Logical NOT Operator

console.log(!f); // false

console.log(!o); // true 

//.................................

//JavaScript if...else Statement In JavaScript, there are three forms of the if...else statement. 1). if statement  2). if...else statement  3).  if...else if...else statement

//JavaScript if Statement

const number = 2;

// check if number is greater than 0

if (number > 0) {

 // the body of the if statement

  console.log("The number is positive");

  } // The number is positive 

//1. Suppose the user entered 2. In this case, the condition number > 0 evaluates to true. And, the body of the if statement is executed.

//2. Suppose the user entered -1. In this case, the condition number > 0 evaluates to false. Hence, the body of the if statement is skipped.

const mumber = -5;

if (mumber < 0) {

  console.log("negative!!");

}// negative!!

  // JavaScript if...else statement

const pk = 2;

if (pk > 0){ console.log("Number is positive ") } else

{ console.log ("Number is negative or O")

}; // Number is positive 

//The if..else statement evaluates the condition inside the parenthesis.

//If the condition is evaluated to true,

//the code inside the body of if is executed

//the code inside the body of else is skipped from execution

//If the condition is evaluated as false,

//the code inside the body of else is executed

//the code inside the body of if is skipped from execution

// JavaScript if...else if...else statement

// check if the number if positive, negative or zero

const jk = 5;

// check if number is greater than 0

if (jk > 0) {

    console.log("The jk number is positive");

}

// check if number is 0

else if (jk == 0) {

  console.log("The jk number is 0");

}

// if number is neither greater than 0, nor zero

else {

    console.log("The jk number is negative");

}

// example 2.

const gg = -1;

if (gg > 0){

  console.log(" gg is positive ");

}

else if (gg == 0) {

  console.log("gg is 0");

} 

else {

  console.log(" gg is negative ");

}

//Nested if...else Statement

let lg = 66;

if (lg >= 0){

  if (lg == 0) {

    console.log(" this is 0" ) ;}

    else {console.log(" this is positive ");} } else {

  console.log(" this is negative ");

}  // this is positive 

// example 2.

lg = 0;

if (lg >= 0){

  if (lg == 0) {

    console.log(" this is 0" ) ;}

    else {console.log(" this is positive ");} } else {

  console.log(" this is negative ");

} // this is 0

// program using switch statement

let A = 9;

switch (A) {

    case 1:

        A = 'one';

        break;

    case 2:

        A = 'two';

        break;

    default:

        A = 'not found';

        break;

}

console.log(`The value is ${A}`); // not found 

// example 2.

let B = 8;

switch (B) {

  case 0: 

    B = 'zero';

    break;

  case 7:

    B = 'seven';

    break ;

  case 8: 

    B = 'eight';

    break;

  case -1:

    B = 'negative';

    break ;

  default :

    B = 'not found';

    break ;}

console.log(` this is ${B}`)

//The expression's result is evaluated with case 1 which results in false.

//Then the switch statement goes to the second case. Here, the expression's result matches with case 2. So The value is two is displayed. The value is two

//The break statement terminates the block and control flow of the program jumps to outside of the switch block.

// CALCULATOR ##

// program for a simple calculator

let result;

// take the operator input

const operator ='+' ;

// take the operand input

const number1 =6 //parseFloat(prompt(5));

const number2 =6 //parseFloat(prompt(4));

switch(operator) {

    case '+':

        result = number1 + number2;

        console.log(`${number1} + ${number2} = ${result}`);

        break;

    case '-':

        result = number1 - number2;

        console.log(`${number1} - ${number2} = ${result}`);

        break;

    case '*':

        result = number1 * number2;

        console.log(`${number1} * ${number2} = ${result}`);

        break;

    case '/':

        result = number1 / number2;

        console.log(`${number1} / ${number2} = ${result}`);

        break;

    default:

        console.log('Invalid operator');

        break; } // 6+6 = 12;

// example 2.

let results;

const symbol= '/';

const num1 = 100;

const num2 = 50;

switch (symbol) {

  case '-':

    results= num1 - num2 ;

    console.log(`${num1} - ${num2} = ${results}`)

  case '+':

    results= num1 + num2 ;

    console.log(`${num1} + ${num2} = ${results}`)

  case '*':

    results = num1 * num2 ;

    console.log(`${num1} * ${num2} = ${results}`)

  case '/':

    results = num1 / num2;

    console.log(`${num1} / ${num2} = ${results}`)

}; // 100/50 = 2;

//JavaScript switch With Multiple Case

// multiple case switch program

let fruit = 'apple';

switch(fruit) {

    case 'apple':

    case 'mango':

    case 'pineapple':

        console.log(`${fruit} is a fruit.`);

        break;

    default:

        console.log(`${fruit} is not a fruit.`);

        break;

} // apple is a fruit.

// What happens if I forgot a break[?]

var foo = 0;

switch (foo) {

  case -1:

    console.log('negative 1');

    break;

  case 0: // foo is 0 so criteria met here so this block will run

    console.log(0);

    // NOTE: the forgotten break would have been here

  case 1: // no break statement in 'case 0:' so this case will run as well

    console.log(1);

    break; // it encounters this break so will not continue into 'case 2:'

  case 2:

    console.log(2);

    break;

  default:

    console.log('default');

};

//Can I put a default between cases?

//Yes, i can! JavaScript will drop you back to the default if it can't find a match:

var foo = 5;

switch (foo) {

  case 2:

    console.log(2);

    break; // it encounters this break so will not continue into 'default:'

  default:

    console.log('default')

    break ;

    // fall-through

  case 1:

    console.log('1');

}

console.log('Interview Questions')

//... **** Interview Questions ****

console.log('Q1. Convert Following code into ternary' )

 

let age = 15;

let newresult;

if (age >= 18) {

      newresult = "You are eligible to vote.";

} else {

      newresult = "You are not eligible to vote yet.";

}

console.log(newresult); //You are not eligible to vote.

let nage = 15;

let nresult =

    (nage >= 18) ? "You are eligible to vote." : "You are not eligible to vote yet";

console.log(nresult); // You are not eligible to vote.

console.log('Q2. What will be the output of following code?')

let S = 3;

let aresult = (S >= 0) ? (S == 0 ? "zero" : "positive") : "negative";

console.log(`The number is ${aresult}.`); // this number is positive 

    

